#!/bin/bash

# Muhammad Nur Zulkarnaen (S17) CFC020823
# Kar Wei

#Functions----------------------

# Function for Basic scan.
# Basic: scans the network for TCP and UDP, including the service version and weak passwords.
# To scan the network for TCP ports and service version, used nmap $user_ip -sV -oN $direc.txt, this is the nmap the ip input by user with flag -sV for version ad -oN to output into the output directory by user.
# To scan for weak passwords, hydra was used for all 4 services (ssh, telnet, ftp and rdp), usernames list is provided, passwords list is provided if user selects default, or uses user's passwords list. flag -t 4 to use 4 threads to optimise brute force speed, -T 2 to adust time out duration to 2 secs. results of each hydra to be output into user input directory.
# To scan for UDP ports, used masscan.
function Basic()
{
	nmap $user_ip -sV -oN $direc.txt
	hydra -L top-usernames-shortlist.txt -P $passlst $user_ip ssh >> $direc.txt -t 4 -T 2
	hydra -L top-usernames-shortlist.txt -P $passlst $user_ip telnet >> $direc.txt -t 4 -T 2
	hydra -L top-usernames-shortlist.txt -P $passlst $user_ip ftp >> $direc.txt -t 4 -T 2
	hydra -L top-usernames-shortlist.txt -P $passlst $user_ip rdp >> $direc.txt -t 4 -T 2
	
	sudo masscan $user_ip -pU:1-10000 >> $direc.txt
	
}



# Function for Full scan
# Full: include Nmap Scripting Engine (NSE), weak passwords, and vulnerability analysis.
# To scan the network for TCP ports and service version, used nmap $user_ip -sV -oN $direc.txt, this is the nmap the ip input by user with flag -sV for version ad -oN to output into the output directory by user.
# To scan for weak passwords for ssh, telnet, ftp, used brute NSEs with either default passwords list or user passwords list. Output to .txt file and .xml file.
# To scan for weak passwords for rdp, used hydra bruteforce, outpuut to user output directory.
# Used .xml file to automate searchsploit and append results into .txt file.
# To scan for UDP ports, used masscan.
# Used vulners script to access vulnerabilities.
function Full()
{
	nmap $user_ip --script ssh-brute,telnet-brute,ftp-brute,vulners --script-args ssh-brute.passdb=$passlst,telnet-brute.passdb=$passlst,ftp-brute.passdb=$passlst -sV -oN $direc.txt -oX $direc.xml
	
	hydra -L top-usernames-shortlist.txt -P $passlst $user_ip rdp >> $direc.txt
	
	searchsploit --nmap $direc.xml >> $direc.txt 
	
	sudo masscan $user_ip -pU:1-10000 >> $direc.txt
	
}



# Function to allow user to choose which passwords list to use
# Used condition loop to determine user input.
# If user selects default, darkweb2017-top100.txt passwords list will be used.
# For ease, move own passwords list into the same directory as this script.
function Pass()
{
	echo 'Please provide the full path of your own passwords lists or select default to use the default passwords list'
	read passlst
		
		if [ $passlst == default ]
		then
			
			passlst=darkweb2017-top100.txt	
		
		fi
}



# https://www.oreilly.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html 
# Regular expression link
# Function to validate IP address
function ip_validate()
{
    local ip=$1
    local regex="^([0-9]{1,3}\.){3}[0-9]{1,3}$"

    if [[ $ip =~ $regex ]]; then
        # Each octet should be between 0 and 255
        IFS='.' read -ra octets <<< "$ip"
        for octet in "${octets[@]}"; do
            if [[ $octet -lt 0 || $octet -gt 255 ]]; then
                return 1  # Invalid IP address
            fi
        done
        return 0  # Valid IP address
    else
        return 1  # Invalid IP address
    fi
}



# Function to zip
function zipp()
{
	
	zip $direc $direc.txt
	
}

# Start of script-------------------------------------------------------------------------------------


# Read user input for ip address.
# Indicate Stage 1 to user.
read -p "Stage 1: Enter an IP address: " user_ip

# Validates the entered IP address.
# Gets user to restart the script if invalid ip address is keyed in.
if ip_validate "$user_ip"; 

then
    echo "Valid IP address."
else
    echo "Invalid IP address. Restart the script."
    exit
fi




# User input for output directory. Specifies to not input file extension so that user knows to type a new file name and so that basic and full scan functions can run without issues.
# Indicates Stage 2 to user.
echo "Stage 2: Please provide a name for the output directory (without the file extension): "
read direc




# User input for Basic or Full
# Indicates Stage 3 to user.
echo "Stage 3: Please choose basic or full: "
read choice




# If user selects basic scan, passwords list function then basic scan function will run.

if [ $choice == basic ]
then

	Pass
	Basic
	
fi




# If user selects full scan, passwords list function then full scan function will run.


if [ $choice == full ]
then
	
	Pass
	Full

fi

# After scan completed, geany the output directory to allow user to search the results.

geany $direc.txt

# User input to zip results or not
# If yes, proceed to ask user to input zip folder name (preferably same output directory name) and run zip function.
# If no, script will end.

echo "Would you like to zip the results? y/n"
read zipit


if [ $zipit == y ]
then

	echo "Output directory name will be zip folder name."
	
	zipp

else

	exit
	
fi

